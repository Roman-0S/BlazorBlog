@page "/author/posts/manage"

@rendermode InteractiveServer

@inject IBlogPostDTOService BlogService
@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav


<PageTitle>Tech Log | Manage Posts</PageTitle>

<div>

    <div class="row align-items-center gy-2 mb-4 pb-1 pb-sm-2 pb-lg-3">

        <div class="col-lg-5  mb-4 mb-lg-0">

            @if(isPublished)
            {
                <h1 class="mb-0 me-4">Published Blogs</h1>
            }
            else if (isDeleted)
            {
                <h1 class="mb-0 me-4">Deleted Blogs</h1>
            }
            else if (!isPublished && !isDeleted)
            {
                <h1 class="mb-0 me-4">Drafted Blogs</h1>
            }

        </div>

        <div class="col-xl-2 col-lg-3 col-sm-5">

            <InputSelect class="form-select" @bind-Value="CategoryId" @bind-Value:after="HandleCategoryChange">

                <option value="">All categories</option>

                @foreach (CategoryDTO category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }

            </InputSelect>

        </div>

        <div class="col-lg-4 col-sm-7">

            <form @onsubmit="HandleSearch">

                <div class="position-relative">

                    <i class="ai-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>

                    <InputText class="form-control ps-5" type="text" placeholder="Enter keyword" @bind-Value="searchInput" />

                </div>

            </form>


        </div>

        <div class="col">

            <div class="mt-3 text-center text-sm-start">

                <button class="btn btn-sm btn-primary me-2" @onclick="ShowPublished">Published</button>

                <button class="btn btn-sm btn-info me-2" @onclick="ShowDrafts">Draft</button>

                <button class="btn btn-sm btn-danger me-2" @onclick="ShowDeleted">Deleted</button>

            </div>

        </div>

    </div>

    <div class="mt-3">

        @foreach (BlogPostDTO blogPost in blogPosts.Data)
        {
            <BlogPostManageCard BlogPost="blogPost" isDeleted="isDeleted" OnDelete="HandleDelete" OnRecover="HandleRecover" />
        }

    </div>

    <!-- Pagination -->
    <div class="row gy-3 align-items-center mt-lg-5 pt-2 pt-md-4 pt-lg-0">

        <div class="col col-md-4 col-6 order-md-1 order-1">

            <div class="hstack gap-2">

                @if (Page > 1)
                {
                    <a href="/author/posts/manage?page=@(Page - 1)" class="btn btn-primary btn-sm rounded-pill"><i class="ai ai-arrow-left"></i></a>
                }
                else
                {
                    <a href="/author/posts/manage?page=@(1)" class="btn btn-primary btn-sm rounded-pill disabled"><i class="ai ai-arrow-left"></i></a>
                }

                @if (Page < blogPosts.TotalPages)
                {
                    <a href="/author/posts/manage?page=@(Page + 1)" class="btn btn-primary btn-sm rounded-pill"><i class="ai ai-arrow-right"></i></a>
                }
                else
                {
                    <a href="/author/posts/manage?page=@(blogPosts.TotalPages)" class="btn btn-primary btn-sm rounded-pill disabled"><i class="ai ai-arrow-right"></i></a>
                }

            </div>

        </div>

        <div class="col col-md-4 col-12 order-md-2 order-3 text-center">
            Page @blogPosts.Page of @blogPosts.TotalPages
        </div>

        <div class="col col-md-4 col-6 order-md-3 order-2">

            <nav aria-label="Page navigation">

                <ul class="pagination pagination-sm justify-content-end">

                    <li class="page-item" aria-current="page">

                        <a class="page-link" href="/author/posts/manage?page=1">1</a>

                    </li>

                    @for (int i = 2; i <= blogPosts.TotalPages; i++)
                    {
                        <li class="page-item"><a class="page-link" href="/author/posts/manage?page=@i">@i</a></li>
                    }

                </ul>

            </nav>

        </div>

    </div>

</div>



@code {

    #region parameters

    [SupplyParameterFromQuery]
    public int? CategoryId { get; set; }

    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }

    [SupplyParameterFromQuery]
    public int Page { get; set; }

    #endregion


    #region state

    private PagedList<BlogPostDTO> blogPosts = new();

    private IEnumerable<CategoryDTO> categories = [];

    private bool isPublished = true;

    private bool isDeleted;

    private string? searchInput;

    private int pageSize = 5;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategoriesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Page < 1)
        {
            Page = 1;
        }

        if (isPublished)
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                blogPosts = await BlogService.SearchPublishedBlogPostsAsync(SearchTerm, Page, pageSize);
            }
            else if (CategoryId is not null or 0)
            {
                // blogPosts = await BlogService.GetBlogPostsByCategoryIdAsync(CategoryId.Value);

                // blogPosts = blogPosts.Where(bp => bp.IsPublished == true);
            }
            else
            {
                blogPosts = await BlogService.GetPublishedBlogPostsAsync(Page, pageSize);
            }
        }
        else if (isDeleted)
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                // blogPosts = await BlogService.SearchBlogPostsAsync(SearchTerm);

                // blogPosts = blogPosts.Where(bp => bp.IsDeleted == true);
            }
            else if (CategoryId is not null or 0)
            {
                // blogPosts = await BlogService.GetBlogPostsByCategoryIdAsync(CategoryId.Value);

                // blogPosts = blogPosts.Where(bp => bp.IsDeleted == true);
            }
            else
            {
                blogPosts = await BlogService.GetDeletedBlogPostsAsync(Page, pageSize);
            }
        }
        else if (!isDeleted && !isPublished)
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                // blogPosts = await BlogService.SearchBlogPostsAsync(SearchTerm);

                // blogPosts = blogPosts.Where(bp => bp.IsDeleted == false && bp.IsPublished == false);
            }
            else if (CategoryId is not null or 0)
            {
                // blogPosts = await BlogService.GetBlogPostsByCategoryIdAsync(CategoryId.Value);

                // blogPosts = blogPosts.Where(bp => bp.IsDeleted == false && bp.IsPublished == false);
            }
            else
            {
                blogPosts = await BlogService.GetDraftedBlogPostsAsync(Page, pageSize);
            }
        }

    }

    private async Task HandleDelete(BlogPostDTO blogPost)
    {
        try
        {
            await BlogService.UpdateBlogPostAsync(blogPost);

            await OnParametersSetAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task HandleRecover(BlogPostDTO blogPost)
    {
        try
        {
            await BlogService.UpdateBlogPostAsync(blogPost);

            await OnParametersSetAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private void HandleCategoryChange()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), CategoryId },
            { nameof(SearchTerm), null },
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);

        Nav.NavigateTo(url);
    }

    private void HandleSearch()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), null },
            { nameof(SearchTerm), searchInput },
            { nameof(Page), 1 }
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);

        Nav.NavigateTo(url);
    }

    private async Task ShowPublished()
    {
        isPublished = true;
        isDeleted = false;

        Page = 1;

        await OnParametersSetAsync();

        Nav.NavigateTo("/author/posts/manage?page=1");
    }

    private async Task ShowDeleted()
    {
        isPublished = false;
        isDeleted = true;

        Page = 1;

        await OnParametersSetAsync();

        Nav.NavigateTo("/author/posts/manage?page=1");
    }

    private async Task ShowDrafts()
    {
        isPublished = false;
        isDeleted = false;

        Page = 1;

        await OnParametersSetAsync();

        Nav.NavigateTo("/author/posts/manage?page=1");
    }

    #endregion

}
