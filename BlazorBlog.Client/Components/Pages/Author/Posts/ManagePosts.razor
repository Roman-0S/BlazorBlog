@page "/author/posts/manage"

@rendermode InteractiveServer

@inject IBlogPostDTOService BlogService
@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav


<div>

    <div class="row align-items-center gy-2 mb-4 pb-1 pb-sm-2 pb-lg-3">

        <div class="col-xl-6 col-lg-7  mb-4 mb-lg-0 hstack justify-content-between">

            @if(isPublished)
            {
                <h1 class="mb-0 me-4">Published Blogs</h1>
            }
            else if (isDeleted)
            {
                <h1 class="mb-0 me-4">Deleted Blogs</h1>
            }
            else if (!isPublished && !isDeleted)
            {
                <h1 class="mb-0 me-4">Drafted Blogs</h1>
            }

            <div class="text-end">

                <button class="btn btn-sm btn-primary me-2" @onclick="ShowPublished">Published</button>

                <button class="btn btn-sm btn-info me-2" @onclick="ShowDrafts">Draft</button>

                <button class="btn btn-sm btn-danger me-2" @onclick="ShowDeleted">Deleted</button>

            </div>

        </div>

        <div class="col-xl-2 col-lg-2 col-sm-5">

            <InputSelect class="form-select" @bind-Value="CategoryId" @bind-Value:after="HandleCategoryChange">

                <option value="">All categories</option>

                @foreach (CategoryDTO category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }

            </InputSelect>

        </div>

        <div class="col-xl-4 col-lg-3 col-sm-7">

            <form @onsubmit="HandleSearch">

                <div class="position-relative">

                    <i class="ai-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>

                    <InputText class="form-control ps-5" type="text" placeholder="Enter keyword" @bind-Value="searchInput" />

                </div>

            </form>


        </div>

    </div>

    <div class="mt-5">

        @foreach (BlogPostDTO blogPost in blogPosts)
        {
            <BlogPostCard BlogPost="blogPost" OnDelete="HandleDelete" />
        }

    </div>

</div>



@code {

    #region parameters

    [SupplyParameterFromQuery]
    public int? CategoryId { get; set; }

    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }

    #endregion


    #region state

    private IEnumerable<BlogPostDTO> blogPosts = [];

    private IEnumerable<CategoryDTO> categories = [];

    private bool isPublished = true;

    private bool isDeleted;

    private string? searchInput;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        blogPosts = await BlogService.GetBlogPostsAsync();

        categories = await CategoryService.GetCategoriesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isPublished)
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                blogPosts = await BlogService.SearchBlogPostsAsync(SearchTerm);
            }
            else if (CategoryId is not null or 0)
            {
                blogPosts = await BlogService.GetBlogPostsByCategoryIdAsync(CategoryId.Value);
            }
            else
            {
                blogPosts = await BlogService.GetBlogPostsAsync();
            }

            blogPosts = blogPosts.Where(bp => bp.IsPublished == true);
        }
        else if (isDeleted)
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                blogPosts = await BlogService.SearchBlogPostsAsync(SearchTerm);
            }
            else if (CategoryId is not null or 0)
            {
                blogPosts = await BlogService.GetBlogPostsByCategoryIdAsync(CategoryId.Value);
            }
            else
            {
                blogPosts = await BlogService.GetBlogPostsAsync();
            }

            blogPosts = blogPosts.Where(bp => bp.IsDeleted == true);
        }
        else if (!isDeleted && !isPublished)
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                searchInput = SearchTerm;
                CategoryId = null;

                blogPosts = await BlogService.SearchBlogPostsAsync(SearchTerm);
            }
            else if (CategoryId is not null or 0)
            {
                blogPosts = await BlogService.GetBlogPostsByCategoryIdAsync(CategoryId.Value);
            }
            else
            {
                blogPosts = await BlogService.GetBlogPostsAsync();
            }

            blogPosts = blogPosts.Where(bp => bp.IsDeleted == false && bp.IsPublished == false);
        }

    }

    private async Task HandleDelete(BlogPostDTO blogPost)
    {
        try
        {
            await BlogService.UpdateBlogPostAsync(blogPost);

            blogPosts = await BlogService.GetBlogPostsAsync();

            blogPosts = blogPosts.Where(bp => bp.IsPublished == true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private void HandleCategoryChange()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), CategoryId },
            { nameof(SearchTerm), null },
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);

        Nav.NavigateTo(url);
    }

    private void HandleSearch()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), null },
            { nameof(SearchTerm), searchInput },
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);

        Nav.NavigateTo(url);
    }

    private async void ShowPublished()
    {
        isPublished = true;
        isDeleted = false;

        await OnParametersSetAsync();
    }

    private async void ShowDeleted()
    {
        isPublished = false;
        isDeleted = true;

        await OnParametersSetAsync();
    }

    private async void ShowDrafts()
    {
        isPublished = false;
        isDeleted = false;

        await OnParametersSetAsync();
    }

    #endregion

}
