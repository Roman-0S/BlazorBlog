@using BlazorBlog.Client.Helpers

@if (Category is not null)
{

    <EditForm Model="Category" OnValidSubmit="HandleSubmit">

        <DataAnnotationsValidator />

        <div class="card overflow-hidden">

            <div class="row g-0">

                <div class="col-sm-4 bg-repeat-0 bg-size-cover" style="background-image: url(@(string.IsNullOrEmpty(Category.ImageURL) ? ImageHelper.DefaultCategoryImage : Category.ImageURL)); min-height: 14rem;"></div>

                <div class="col-sm-8">

                    <div class="card-body">

                        <ul class="list-group mt-3 mb-4">

                            <li class="list-group-item">

                                <label class="form-label" for="categoryName">
                                    Add a Name
                                </label>

                                <div class="vstack gap-2">

                                    <InputText class="form-control" placeholder="Category Name" @bind-Value="Category.Name" id="categoryName" />

                                    <div>

                                        <ValidationMessage For="() => Category.Name" />

                                    </div>

                                </div>

                            </li>

                            <li class="list-group-item">

                                <label class="form-label" for="categoryImage">
                                    Add a Image
                                </label>

                                <div class="vstack gap-2">

                                    <InputFile OnChange="OnFileChange" class="form-control" accept=".png, .jpg, .jpeg, .svg" id="categoryImage" />

                                    <span class="text-danger">@imageError</span>

                                </div>


                            </li>

                            <li class="list-group-item">

                                <label class="form-label" for="categoryDescription">
                                    Add a Description
                                </label>

                                <div class="d-flex gap-3">

                                    <InputText class="form-control" placeholder="Category Description" @bind-Value="Category.Description" id="categoryDescription" />

                                </div>

                            </li>

                        </ul>

                        <div class="hstack gap-2 justify-content-end">

                            <button class="btn btn-primary btn-sm">

                                <i class="ai ai-save me-2"></i>

                                Save

                            </button>

                            <button class="btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#collapseForm" type="button" @onclick="HandleCancel">

                                <i class="ai ai-cross-alt me-2"></i>

                                Cancel

                            </button>

                        </div>

                    </div>

                </div>

            </div>

        </div>

    </EditForm>


}


@code {

    #region parameters

    [Parameter, EditorRequired]
    public CategoryDTO? Category { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CategoryDTO> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnCancel { get; set; }

    #endregion


    #region state

    private string? imageError;

    #endregion


    #region methods

    private async Task HandleSubmit()
    {
        await OnSubmit.InvokeAsync(Category);

        imageError = null;
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();

        imageError = null;
    }

    private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
    {
        if (changeEvent.File is null)
        {
            Category!.ImageURL = ImageHelper.DefaultCategoryImage;
        }
        else if (changeEvent.File.Size > ImageHelper.MaxFileSize)
        {
            imageError = "Images must be less than 5 MB";
        }
        else
        {
            try
            {
                Category!.ImageURL = await ImageHelper.GetDataUrl(changeEvent.File);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                imageError = "Could not read the selected file. Please select a different image";
            }
        }
    }

    #endregion

}
