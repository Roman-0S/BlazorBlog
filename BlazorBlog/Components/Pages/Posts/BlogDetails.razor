@page "/posts/{slug}"
@layout SidebarLayout

@using BlazorBlog.Client.Components.UI.Comments
@using BlazorBlog.Components.Layout
@using BlazorBlog.Client.Components.UI.Tags
@using BlazorBlog.Client.Helpers
@using BlazorBlog.Client.Models
@using BlazorBlog.Client.Services.Interfaces

@inject IBlogPostDTOService BlogService

@if (blogPost is null)
{
    <PageTitle>Tech Log | Not Found</PageTitle>

    <div class="d-flex h-100 flex-column align-items-center justify-content-center gap-2">

        <h1>Uh oh!</h1>

        <p class="lead">This post could not be found.</p>

        <a href="/" class="btn btn-primary">Go Back Home</a>

    </div>
}
else
{
    <PageTitle>Blazor Blog | @blogPost.Title</PageTitle>

    <!-- Post title + post meta -->
    <h1 class="pb-2 pb-lg-3">@blogPost.Title</h1>
    <div class="d-flex flex-wrap align-items-center justify-content-between border-bottom mb-4">

        <div class="d-flex align-items-center mb-4 me-4">

            <span class="fs-sm me-2">By:</span>

            <a class="nav-link position-relative fw-semibold p-0" href="/posts/@Slug/#authorWidget" data-scroll data-scroll-offset="80">

                Roman Steele

                <span class="d-block position-absolute start-0 bottom-0 w-100" style="background-color: currentColor; height: 1px;"></span>

            </a>

        </div>

    </div>


    <!-- Post content -->
    <div class="post-content">

        <p class="fs-lg pt-2 pt-sm-3">@blogPost.Abstract</p>

        <img class="img-fluid rounded-5 my-3" src="@(string.IsNullOrEmpty(blogPost.ImageURL) ? ImageHelper.DefaultBlogImage : blogPost.ImageURL)" alt="Image">

        <p class="fs-lg pb-2 pb-lg-0 mb-4 mb-lg-5">@((MarkupString)blogPost.Content!)</p>

    </div>

    <!-- Tags -->
    <div class="d-flex flex-wrap pb-5 pt-3 pt-md-4 pt-xl-5 mt-xl-n2">

        <h3 class="h6 py-1 mb-0 me-4">Relevant tags:</h3>

        @foreach (TagDTO tag in blogPost.Tags)
        {
            <TagPill Tag="tag" />
        }


    </div>

    <!-- Author widget -->
    <div class="border-top border-bottom py-4" id="authorWidget">
        <div class="d-flex align-items-start py-2">
            <img class="d-block rounded-circle mb-3" src="api/uploads/author" width="56" alt="Author image">
            <div class="d-md-flex w-100 ps-4">
                <div style="max-width: 26rem;">
                    <h3 class="h5 mb-2">Roman Steele</h3>
                    <p class="fs-sm mb-0">
                        I'm a full-stack developer with experience in Blazor, ASP.NET 8, C#, and JavaScript.
                        My journey began with personal projects where I used C# to code video game fundamentals,
                        igniting a deep passion for development. I especially enjoy problem-solving and finding
                        innovative yet intuitive solutions to complex challenges.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <AuthorizeView>

        <Authorized>
            <CommentArea @rendermode="InteractiveAuto" BlogPostId="blogPost.Id" Comments="blogPost.Comments" />
        </Authorized>

        <NotAuthorized>
            <CommentArea BlogPostId="blogPost.Id" Comments="blogPost.Comments" />
        </NotAuthorized>

    </AuthorizeView>

    @* this component will execute the exported onUpdate function when the page updates *@
    <BlazorPageScript.PageScript Src="./Components/Pages/Posts/BlogDetails.razor.js" />

}

@code {

    #region parameters

    [Parameter]
    public string? Slug { get; set; }

    #endregion


    #region state

    private BlogPostDTO? blogPost;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            blogPost = await BlogService.GetBlogPostBySlugAsync(Slug);
        }
    }

    #endregion

}
