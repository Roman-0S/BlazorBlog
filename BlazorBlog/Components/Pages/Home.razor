@page "/"


@using BlazorBlog.Client.Components.UI.Blog
@using BlazorBlog.Client.Models
@using BlazorBlog.Client.Services.Interfaces

@inject IBlogPostDTOService BlogService
@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav


<PageTitle>BlazorBlog | Home</PageTitle>

<div>

    <div class="row mb-md-2 mb-xl-4">

        <!-- Blog posts -->
        <div class="col-lg-9 pe-lg-4 pe-xl-5">
            <h1 class="pb-3 pb-lg-4">Blog list with sidebar</h1>

            @* Blog Post *@

            <div>

                @foreach (BlogPostDTO blogPost in blogPosts)
                {
                    <BlogPostCard BlogPost="blogPost" OnDelete="HandleDelete" isDeleted="isDeleted" OnRecover="HandleRecover" />
                }

            </div>


            <!-- Pagination -->
            <div class="row gy-3 align-items-center mt-lg-5 pt-2 pt-md-4 pt-lg-0">
                <div class="col col-md-4 col-6 order-md-1 order-1">
                    <div class="d-flex align-items-center">
                        <span class="text-body-secondary fs-sm">Show</span>
                        <select class="form-select form-select-flush w-auto">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="15">15</option>
                            <option value="25">25</option>
                        </select>
                    </div>
                </div>
                <div class="col col-md-4 col-12 order-md-2 order-3 text-center">
                    <button class="btn btn-primary w-md-auto w-100" type="button">Load more posts</button>
                </div>
                <div class="col col-md-4 col-6 order-md-3 order-2">
                    <nav aria-label="Page navigation">
                        <ul class="pagination pagination-sm justify-content-end">
                            <li class="page-item active" aria-current="page">
                                <span class="page-link">1<span class="visually-hidden">(current)</span></span>
                            </li>
                            <li class="page-item"><a class="page-link" href="#">2</a></li>
                            <li class="page-item"><a class="page-link" href="#">3</a></li>
                            <li class="page-item"><a class="page-link" href="#">4</a></li>
                            <li class="page-item"><a class="page-link" href="#">5</a></li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>


        <!-- Sidebar (offcanvas on sreens < 992px) -->
        <aside class="col-lg-3">
            <div class="offcanvas-lg offcanvas-end" id="sidebarBlog">
                <div class="offcanvas-header">
                    <h4 class="offcanvas-title">Sidebar</h4>
                    <button class="btn-close ms-auto" type="button" data-bs-dismiss="offcanvas" data-bs-target="#sidebarBlog" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">

                    <!-- Search box -->
                    <form @onsubmit="HandleSearch">

                        <div class="position-relative mb-4 mb-lg-5">

                            <i class="ai-search position-absolute top-50 start-0 translate-middle-y ms-3"></i>

                            <InputText class="form-control ps-5" type="text" placeholder="Enter keyword" @bind-Value="searchInput" />

                        </div>

                    </form>


                    <!-- Category links -->
                    <h4 class="pt-1 pt-lg-0 mt-lg-n2">Categories:</h4>
                    <ul class="nav flex-column mb-lg-5 mb-4">
                        <li class="mb-2">
                            <button class="nav-link d-flex p-0 active" value="">
                                All categories
                            </button>
                        </li>

                        @foreach (CategoryDTO category in categories.OrderByDescending(c => c.Posts.Count()))
                        {
                            <li class="mb-2 hstack">

                                <button class="nav-link d-flex p-0" value="@category.Id">@category.Name</button>

                                <span class="fs-sm text-body-secondary ms-2">(@category.Posts.Count())</span>

                            </li>
                        }

                    </ul>

                    <!-- Featured posts widget -->
                    <h4 class="pt-3 pt-lg-0 pb-1">Trending posts:</h4>
                    <div class="mb-lg-5 mb-4">

                        @foreach (BlogPostDTO blogPost in blogPosts.OrderByDescending(bp => bp.Comments.Count()).Take(3))
                        {
                            <SideBarBlogCard blogPost="blogPost" />                           
                        }

                    </div>

                    <!-- Social buttons -->
                    <h4 class="pt-3 pt-lg-0 pb-1">Find Me:</h4>
                    <div class="d-flex mt-n3 ms-n3 mb-lg-5 mb-4 pb-3 pb-lg-0">
                        
                        <a class="btn btn-secondary btn-icon btn-sm btn-github rounded-circle mt-3 ms-3" href="https://github.com/Roman-0S" target="_blank" aria-label="Github">
                            <i class="ai-github"></i>
                        </a>
                        
                        <a class="btn btn-secondary btn-icon btn-sm btn-linkedin rounded-circle mt-3 ms-3" href="https://www.linkedin.com/in/roman-steeledev/" target="_blank" aria-label="LinkedIn">
                            <i class="ai-linkedin"></i>
                        </a>

                    </div>

                    <!-- Banner -->
                    <div class="position-relative mb-3">
                        <div class="position-absolute w-100 text-center top-0 start-50 translate-middle-x pt-4" style="max-width: 15rem;" data-bs-theme="light">
                            <h3 class="h2 pt-3 mb-0">Your banner here!</h3>
                        </div>
                        <img class="rounded-5" src="assets/img/blog/sidebar/banner.jpg" alt="Banner">
                    </div>
                </div>
            </div>
        </aside>
    </div>

</div>



@code {

    #region parameters

    [SupplyParameterFromQuery]
    public int? CategoryId { get; set; }

    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }

    #endregion


    #region state

    private IEnumerable<BlogPostDTO> blogPosts = [];

    private IEnumerable<CategoryDTO> categories = [];

    private bool isDeleted = false;

    private string? searchInput;

    #endregion


    #region methods

    protected override async Task OnInitializedAsync()
    {
        blogPosts = await BlogService.GetBlogPostsAsync();

        blogPosts = blogPosts.Where(bp => bp.IsPublished == true);

        categories = await CategoryService.GetCategoriesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            searchInput = SearchTerm;
            CategoryId = null;

            blogPosts = await BlogService.SearchBlogPostsAsync(SearchTerm);
        }
        else
        {
            blogPosts = await BlogService.GetBlogPostsAsync();
        }

        blogPosts = blogPosts.Where(bp => bp.IsPublished == true);
    }

    private async Task HandleDelete(BlogPostDTO blogPost)
    {
        try
        {
            await BlogService.UpdateBlogPostAsync(blogPost);

            blogPosts = await BlogService.GetBlogPostsAsync();

            blogPosts = blogPosts.Where(bp => bp.IsPublished == true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private void HandleRecover()
    {

    }

    private void HandleSearch()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), null },
            { nameof(SearchTerm), searchInput },
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);

        Nav.NavigateTo(url);
    }

    #endregion

}